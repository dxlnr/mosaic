// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/tensor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct TensorProto {
    // message fields
    pub tensor_dtype: super::dtype::DataType,
    pub tensor_shape: ::protobuf::SingularPtrField<super::tensor_shape::TensorShape>,
    pub tensor_content: ::std::vec::Vec<u8>,
    pub f32_values: ::std::vec::Vec<f32>,
    pub f64_values: ::std::vec::Vec<f64>,
    pub i32_values: ::std::vec::Vec<i32>,
    pub i64_values: ::std::vec::Vec<i64>,
    pub string_val: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TensorProto {
    fn default() -> &'a TensorProto {
        <TensorProto as ::protobuf::Message>::default_instance()
    }
}

impl TensorProto {
    pub fn new() -> TensorProto {
        ::std::default::Default::default()
    }

    // .mosaic.protos.DataType tensor_dtype = 1;


    pub fn get_tensor_dtype(&self) -> super::dtype::DataType {
        self.tensor_dtype
    }
    pub fn clear_tensor_dtype(&mut self) {
        self.tensor_dtype = super::dtype::DataType::DT_INVALID;
    }

    // Param is passed by value, moved
    pub fn set_tensor_dtype(&mut self, v: super::dtype::DataType) {
        self.tensor_dtype = v;
    }

    // .mosaic.protos.TensorShape tensor_shape = 2;


    pub fn get_tensor_shape(&self) -> &super::tensor_shape::TensorShape {
        self.tensor_shape.as_ref().unwrap_or_else(|| <super::tensor_shape::TensorShape as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tensor_shape(&mut self) {
        self.tensor_shape.clear();
    }

    pub fn has_tensor_shape(&self) -> bool {
        self.tensor_shape.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tensor_shape(&mut self, v: super::tensor_shape::TensorShape) {
        self.tensor_shape = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tensor_shape(&mut self) -> &mut super::tensor_shape::TensorShape {
        if self.tensor_shape.is_none() {
            self.tensor_shape.set_default();
        }
        self.tensor_shape.as_mut().unwrap()
    }

    // Take field
    pub fn take_tensor_shape(&mut self) -> super::tensor_shape::TensorShape {
        self.tensor_shape.take().unwrap_or_else(|| super::tensor_shape::TensorShape::new())
    }

    // bytes tensor_content = 3;


    pub fn get_tensor_content(&self) -> &[u8] {
        &self.tensor_content
    }
    pub fn clear_tensor_content(&mut self) {
        self.tensor_content.clear();
    }

    // Param is passed by value, moved
    pub fn set_tensor_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.tensor_content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tensor_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tensor_content
    }

    // Take field
    pub fn take_tensor_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tensor_content, ::std::vec::Vec::new())
    }

    // repeated float f32_values = 4;


    pub fn get_f32_values(&self) -> &[f32] {
        &self.f32_values
    }
    pub fn clear_f32_values(&mut self) {
        self.f32_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_f32_values(&mut self, v: ::std::vec::Vec<f32>) {
        self.f32_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_f32_values(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.f32_values
    }

    // Take field
    pub fn take_f32_values(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.f32_values, ::std::vec::Vec::new())
    }

    // repeated double f64_values = 5;


    pub fn get_f64_values(&self) -> &[f64] {
        &self.f64_values
    }
    pub fn clear_f64_values(&mut self) {
        self.f64_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_f64_values(&mut self, v: ::std::vec::Vec<f64>) {
        self.f64_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_f64_values(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.f64_values
    }

    // Take field
    pub fn take_f64_values(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.f64_values, ::std::vec::Vec::new())
    }

    // repeated int32 i32_values = 6;


    pub fn get_i32_values(&self) -> &[i32] {
        &self.i32_values
    }
    pub fn clear_i32_values(&mut self) {
        self.i32_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_i32_values(&mut self, v: ::std::vec::Vec<i32>) {
        self.i32_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_i32_values(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.i32_values
    }

    // Take field
    pub fn take_i32_values(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.i32_values, ::std::vec::Vec::new())
    }

    // repeated int64 i64_values = 7;


    pub fn get_i64_values(&self) -> &[i64] {
        &self.i64_values
    }
    pub fn clear_i64_values(&mut self) {
        self.i64_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_i64_values(&mut self, v: ::std::vec::Vec<i64>) {
        self.i64_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_i64_values(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.i64_values
    }

    // Take field
    pub fn take_i64_values(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.i64_values, ::std::vec::Vec::new())
    }

    // repeated bytes string_val = 8;


    pub fn get_string_val(&self) -> &[::std::vec::Vec<u8>] {
        &self.string_val
    }
    pub fn clear_string_val(&mut self) {
        self.string_val.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_val(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.string_val = v;
    }

    // Mutable pointer to the field.
    pub fn mut_string_val(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.string_val
    }

    // Take field
    pub fn take_string_val(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.string_val, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TensorProto {
    fn is_initialized(&self) -> bool {
        for v in &self.tensor_shape {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tensor_dtype, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tensor_shape)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tensor_content)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.f32_values)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.f64_values)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.i32_values)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.i64_values)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.string_val)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tensor_dtype != super::dtype::DataType::DT_INVALID {
            my_size += ::protobuf::rt::enum_size(1, self.tensor_dtype);
        }
        if let Some(ref v) = self.tensor_shape.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.tensor_content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.tensor_content);
        }
        if !self.f32_values.is_empty() {
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size((self.f32_values.len() * 4) as u32) + (self.f32_values.len() * 4) as u32;
        }
        if !self.f64_values.is_empty() {
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size((self.f64_values.len() * 8) as u32) + (self.f64_values.len() * 8) as u32;
        }
        if !self.i32_values.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(6, &self.i32_values);
        }
        if !self.i64_values.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(7, &self.i64_values);
        }
        for value in &self.string_val {
            my_size += ::protobuf::rt::bytes_size(8, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tensor_dtype != super::dtype::DataType::DT_INVALID {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.tensor_dtype))?;
        }
        if let Some(ref v) = self.tensor_shape.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.tensor_content.is_empty() {
            os.write_bytes(3, &self.tensor_content)?;
        }
        if !self.f32_values.is_empty() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32((self.f32_values.len() * 4) as u32)?;
            for v in &self.f32_values {
                os.write_float_no_tag(*v)?;
            };
        }
        if !self.f64_values.is_empty() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32((self.f64_values.len() * 8) as u32)?;
            for v in &self.f64_values {
                os.write_double_no_tag(*v)?;
            };
        }
        if !self.i32_values.is_empty() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.i32_values))?;
            for v in &self.i32_values {
                os.write_int32_no_tag(*v)?;
            };
        }
        if !self.i64_values.is_empty() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.i64_values))?;
            for v in &self.i64_values {
                os.write_int64_no_tag(*v)?;
            };
        }
        for v in &self.string_val {
            os.write_bytes(8, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TensorProto {
        TensorProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::dtype::DataType>>(
                "tensor_dtype",
                |m: &TensorProto| { &m.tensor_dtype },
                |m: &mut TensorProto| { &mut m.tensor_dtype },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor_shape::TensorShape>>(
                "tensor_shape",
                |m: &TensorProto| { &m.tensor_shape },
                |m: &mut TensorProto| { &mut m.tensor_shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tensor_content",
                |m: &TensorProto| { &m.tensor_content },
                |m: &mut TensorProto| { &mut m.tensor_content },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "f32_values",
                |m: &TensorProto| { &m.f32_values },
                |m: &mut TensorProto| { &mut m.f32_values },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "f64_values",
                |m: &TensorProto| { &m.f64_values },
                |m: &mut TensorProto| { &mut m.f64_values },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "i32_values",
                |m: &TensorProto| { &m.i32_values },
                |m: &mut TensorProto| { &mut m.i32_values },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "i64_values",
                |m: &TensorProto| { &m.i64_values },
                |m: &mut TensorProto| { &mut m.i64_values },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "string_val",
                |m: &TensorProto| { &m.string_val },
                |m: &mut TensorProto| { &mut m.string_val },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TensorProto>(
                "TensorProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TensorProto {
        static instance: ::protobuf::rt::LazyV2<TensorProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TensorProto::new)
    }
}

impl ::protobuf::Clear for TensorProto {
    fn clear(&mut self) {
        self.tensor_dtype = super::dtype::DataType::DT_INVALID;
        self.tensor_shape.clear();
        self.tensor_content.clear();
        self.f32_values.clear();
        self.f64_values.clear();
        self.i32_values.clear();
        self.i64_values.clear();
        self.string_val.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TensorProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TensorProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13protos/tensor.proto\x12\rmosaic.protos\x1a\x12protos/dtype.proto\
    \x1a\x19protos/tensor_shape.proto\"\xda\x02\n\x0bTensorProto\x12:\n\x0ct\
    ensor_dtype\x18\x01\x20\x01(\x0e2\x17.mosaic.protos.DataTypeR\x0btensorD\
    type\x12=\n\x0ctensor_shape\x18\x02\x20\x01(\x0b2\x1a.mosaic.protos.Tens\
    orShapeR\x0btensorShape\x12%\n\x0etensor_content\x18\x03\x20\x01(\x0cR\r\
    tensorContent\x12!\n\nf32_values\x18\x04\x20\x03(\x02R\tf32ValuesB\x02\
    \x10\x01\x12!\n\nf64_values\x18\x05\x20\x03(\x01R\tf64ValuesB\x02\x10\
    \x01\x12!\n\ni32_values\x18\x06\x20\x03(\x05R\ti32ValuesB\x02\x10\x01\
    \x12!\n\ni64_values\x18\x07\x20\x03(\x03R\ti64ValuesB\x02\x10\x01\x12\
    \x1d\n\nstring_val\x18\x08\x20\x03(\x0cR\tstringValb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
