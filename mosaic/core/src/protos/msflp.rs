// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/msflp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage {
    // message oneof groups
    pub msg: ::std::option::Option<ServerMessage_oneof_msg>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage {
    fn default() -> &'a ServerMessage {
        <ServerMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ServerMessage_oneof_msg {
    set_config(ServerMessage_SetConfigs),
    reconnect(ServerMessage_ReconnectClient),
    global_model_(ServerMessage_GlobalModelResponse),
    status(ServerMessage_ServerStatus),
}

impl ServerMessage {
    pub fn new() -> ServerMessage {
        ::std::default::Default::default()
    }

    // .mosaic.protos.ServerMessage.SetConfigs set_config = 1;


    pub fn get_set_config(&self) -> &ServerMessage_SetConfigs {
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::set_config(ref v)) => v,
            _ => <ServerMessage_SetConfigs as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_config(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_set_config(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::set_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_config(&mut self, v: ServerMessage_SetConfigs) {
        self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::set_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_config(&mut self) -> &mut ServerMessage_SetConfigs {
        if let ::std::option::Option::Some(ServerMessage_oneof_msg::set_config(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::set_config(ServerMessage_SetConfigs::new()));
        }
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::set_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_config(&mut self) -> ServerMessage_SetConfigs {
        if self.has_set_config() {
            match self.msg.take() {
                ::std::option::Option::Some(ServerMessage_oneof_msg::set_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerMessage_SetConfigs::new()
        }
    }

    // .mosaic.protos.ServerMessage.ReconnectClient reconnect = 2;


    pub fn get_reconnect(&self) -> &ServerMessage_ReconnectClient {
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::reconnect(ref v)) => v,
            _ => <ServerMessage_ReconnectClient as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reconnect(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_reconnect(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::reconnect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reconnect(&mut self, v: ServerMessage_ReconnectClient) {
        self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::reconnect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reconnect(&mut self) -> &mut ServerMessage_ReconnectClient {
        if let ::std::option::Option::Some(ServerMessage_oneof_msg::reconnect(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::reconnect(ServerMessage_ReconnectClient::new()));
        }
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::reconnect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reconnect(&mut self) -> ServerMessage_ReconnectClient {
        if self.has_reconnect() {
            match self.msg.take() {
                ::std::option::Option::Some(ServerMessage_oneof_msg::reconnect(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerMessage_ReconnectClient::new()
        }
    }

    // .mosaic.protos.ServerMessage.GlobalModelResponse global_model_ = 3;


    pub fn get_global_model_(&self) -> &ServerMessage_GlobalModelResponse {
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::global_model_(ref v)) => v,
            _ => <ServerMessage_GlobalModelResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_global_model_(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_global_model_(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::global_model_(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_global_model_(&mut self, v: ServerMessage_GlobalModelResponse) {
        self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::global_model_(v))
    }

    // Mutable pointer to the field.
    pub fn mut_global_model_(&mut self) -> &mut ServerMessage_GlobalModelResponse {
        if let ::std::option::Option::Some(ServerMessage_oneof_msg::global_model_(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::global_model_(ServerMessage_GlobalModelResponse::new()));
        }
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::global_model_(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_global_model_(&mut self) -> ServerMessage_GlobalModelResponse {
        if self.has_global_model_() {
            match self.msg.take() {
                ::std::option::Option::Some(ServerMessage_oneof_msg::global_model_(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerMessage_GlobalModelResponse::new()
        }
    }

    // .mosaic.protos.ServerMessage.ServerStatus status = 4;


    pub fn get_status(&self) -> &ServerMessage_ServerStatus {
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::status(ref v)) => v,
            _ => <ServerMessage_ServerStatus as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_status(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ServerMessage_ServerStatus) {
        self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::status(v))
    }

    // Mutable pointer to the field.
    pub fn mut_status(&mut self) -> &mut ServerMessage_ServerStatus {
        if let ::std::option::Option::Some(ServerMessage_oneof_msg::status(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::status(ServerMessage_ServerStatus::new()));
        }
        match self.msg {
            ::std::option::Option::Some(ServerMessage_oneof_msg::status(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_status(&mut self) -> ServerMessage_ServerStatus {
        if self.has_status() {
            match self.msg.take() {
                ::std::option::Option::Some(ServerMessage_oneof_msg::status(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerMessage_ServerStatus::new()
        }
    }
}

impl ::protobuf::Message for ServerMessage {
    fn is_initialized(&self) -> bool {
        if let Some(ServerMessage_oneof_msg::set_config(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerMessage_oneof_msg::reconnect(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerMessage_oneof_msg::global_model_(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerMessage_oneof_msg::status(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::set_config(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::reconnect(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::global_model_(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(ServerMessage_oneof_msg::status(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &ServerMessage_oneof_msg::set_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerMessage_oneof_msg::reconnect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerMessage_oneof_msg::global_model_(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerMessage_oneof_msg::status(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &ServerMessage_oneof_msg::set_config(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerMessage_oneof_msg::reconnect(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerMessage_oneof_msg::global_model_(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerMessage_oneof_msg::status(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage {
        ServerMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerMessage_SetConfigs>(
                "set_config",
                ServerMessage::has_set_config,
                ServerMessage::get_set_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerMessage_ReconnectClient>(
                "reconnect",
                ServerMessage::has_reconnect,
                ServerMessage::get_reconnect,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerMessage_GlobalModelResponse>(
                "global_model_",
                ServerMessage::has_global_model_,
                ServerMessage::get_global_model_,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerMessage_ServerStatus>(
                "status",
                ServerMessage::has_status,
                ServerMessage::get_status,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerMessage>(
                "ServerMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerMessage {
        static instance: ::protobuf::rt::LazyV2<ServerMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerMessage::new)
    }
}

impl ::protobuf::Clear for ServerMessage {
    fn clear(&mut self) {
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage_SetConfigs {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage_SetConfigs {
    fn default() -> &'a ServerMessage_SetConfigs {
        <ServerMessage_SetConfigs as ::protobuf::Message>::default_instance()
    }
}

impl ServerMessage_SetConfigs {
    pub fn new() -> ServerMessage_SetConfigs {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerMessage_SetConfigs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage_SetConfigs {
        ServerMessage_SetConfigs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerMessage_SetConfigs>(
                "ServerMessage.SetConfigs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerMessage_SetConfigs {
        static instance: ::protobuf::rt::LazyV2<ServerMessage_SetConfigs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerMessage_SetConfigs::new)
    }
}

impl ::protobuf::Clear for ServerMessage_SetConfigs {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage_SetConfigs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage_SetConfigs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage_ReconnectClient {
    // message fields
    pub time: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage_ReconnectClient {
    fn default() -> &'a ServerMessage_ReconnectClient {
        <ServerMessage_ReconnectClient as ::protobuf::Message>::default_instance()
    }
}

impl ServerMessage_ReconnectClient {
    pub fn new() -> ServerMessage_ReconnectClient {
        ::std::default::Default::default()
    }

    // int64 time = 1;


    pub fn get_time(&self) -> i64 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i64) {
        self.time = v;
    }
}

impl ::protobuf::Message for ServerMessage_ReconnectClient {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time != 0 {
            os.write_int64(1, self.time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage_ReconnectClient {
        ServerMessage_ReconnectClient::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "time",
                |m: &ServerMessage_ReconnectClient| { &m.time },
                |m: &mut ServerMessage_ReconnectClient| { &mut m.time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerMessage_ReconnectClient>(
                "ServerMessage.ReconnectClient",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerMessage_ReconnectClient {
        static instance: ::protobuf::rt::LazyV2<ServerMessage_ReconnectClient> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerMessage_ReconnectClient::new)
    }
}

impl ::protobuf::Clear for ServerMessage_ReconnectClient {
    fn clear(&mut self) {
        self.time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage_ReconnectClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage_ReconnectClient {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage_GlobalModelResponse {
    // message fields
    pub model: ::protobuf::RepeatedField<super::tensor::TensorProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage_GlobalModelResponse {
    fn default() -> &'a ServerMessage_GlobalModelResponse {
        <ServerMessage_GlobalModelResponse as ::protobuf::Message>::default_instance()
    }
}

impl ServerMessage_GlobalModelResponse {
    pub fn new() -> ServerMessage_GlobalModelResponse {
        ::std::default::Default::default()
    }

    // repeated .mosaic.protos.TensorProto model = 1;


    pub fn get_model(&self) -> &[super::tensor::TensorProto] {
        &self.model
    }
    pub fn clear_model(&mut self) {
        self.model.clear();
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::protobuf::RepeatedField<super::tensor::TensorProto>) {
        self.model = v;
    }

    // Mutable pointer to the field.
    pub fn mut_model(&mut self) -> &mut ::protobuf::RepeatedField<super::tensor::TensorProto> {
        &mut self.model
    }

    // Take field
    pub fn take_model(&mut self) -> ::protobuf::RepeatedField<super::tensor::TensorProto> {
        ::std::mem::replace(&mut self.model, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ServerMessage_GlobalModelResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.model {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.model)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.model {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.model {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage_GlobalModelResponse {
        ServerMessage_GlobalModelResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor::TensorProto>>(
                "model",
                |m: &ServerMessage_GlobalModelResponse| { &m.model },
                |m: &mut ServerMessage_GlobalModelResponse| { &mut m.model },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerMessage_GlobalModelResponse>(
                "ServerMessage.GlobalModelResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerMessage_GlobalModelResponse {
        static instance: ::protobuf::rt::LazyV2<ServerMessage_GlobalModelResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerMessage_GlobalModelResponse::new)
    }
}

impl ::protobuf::Clear for ServerMessage_GlobalModelResponse {
    fn clear(&mut self) {
        self.model.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage_GlobalModelResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage_GlobalModelResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage_ServerStatus {
    // message fields
    pub status: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage_ServerStatus {
    fn default() -> &'a ServerMessage_ServerStatus {
        <ServerMessage_ServerStatus as ::protobuf::Message>::default_instance()
    }
}

impl ServerMessage_ServerStatus {
    pub fn new() -> ServerMessage_ServerStatus {
        ::std::default::Default::default()
    }

    // string status = 1;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ServerMessage_ServerStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage_ServerStatus {
        ServerMessage_ServerStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &ServerMessage_ServerStatus| { &m.status },
                |m: &mut ServerMessage_ServerStatus| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerMessage_ServerStatus>(
                "ServerMessage.ServerStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerMessage_ServerStatus {
        static instance: ::protobuf::rt::LazyV2<ServerMessage_ServerStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerMessage_ServerStatus::new)
    }
}

impl ::protobuf::Clear for ServerMessage_ServerStatus {
    fn clear(&mut self) {
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage_ServerStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage_ServerStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage {
    // message oneof groups
    pub msg: ::std::option::Option<ClientMessage_oneof_msg>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage {
    fn default() -> &'a ClientMessage {
        <ClientMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientMessage_oneof_msg {
    disconnect(ClientMessage_ClientDisconnect),
    update(ClientMessage_ClientUpdate),
    global_model_request(ClientMessage_GlobalModelRequest),
    reporting(ClientMessage_ClientReporting),
}

impl ClientMessage {
    pub fn new() -> ClientMessage {
        ::std::default::Default::default()
    }

    // .mosaic.protos.ClientMessage.ClientDisconnect disconnect = 1;


    pub fn get_disconnect(&self) -> &ClientMessage_ClientDisconnect {
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::disconnect(ref v)) => v,
            _ => <ClientMessage_ClientDisconnect as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_disconnect(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_disconnect(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::disconnect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_disconnect(&mut self, v: ClientMessage_ClientDisconnect) {
        self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::disconnect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_disconnect(&mut self) -> &mut ClientMessage_ClientDisconnect {
        if let ::std::option::Option::Some(ClientMessage_oneof_msg::disconnect(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::disconnect(ClientMessage_ClientDisconnect::new()));
        }
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::disconnect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_disconnect(&mut self) -> ClientMessage_ClientDisconnect {
        if self.has_disconnect() {
            match self.msg.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msg::disconnect(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientMessage_ClientDisconnect::new()
        }
    }

    // .mosaic.protos.ClientMessage.ClientUpdate update = 2;


    pub fn get_update(&self) -> &ClientMessage_ClientUpdate {
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::update(ref v)) => v,
            _ => <ClientMessage_ClientUpdate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_update(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_update(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: ClientMessage_ClientUpdate) {
        self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update(&mut self) -> &mut ClientMessage_ClientUpdate {
        if let ::std::option::Option::Some(ClientMessage_oneof_msg::update(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::update(ClientMessage_ClientUpdate::new()));
        }
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update(&mut self) -> ClientMessage_ClientUpdate {
        if self.has_update() {
            match self.msg.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msg::update(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientMessage_ClientUpdate::new()
        }
    }

    // .mosaic.protos.ClientMessage.GlobalModelRequest global_model_request = 3;


    pub fn get_global_model_request(&self) -> &ClientMessage_GlobalModelRequest {
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::global_model_request(ref v)) => v,
            _ => <ClientMessage_GlobalModelRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_global_model_request(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_global_model_request(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::global_model_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_global_model_request(&mut self, v: ClientMessage_GlobalModelRequest) {
        self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::global_model_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_global_model_request(&mut self) -> &mut ClientMessage_GlobalModelRequest {
        if let ::std::option::Option::Some(ClientMessage_oneof_msg::global_model_request(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::global_model_request(ClientMessage_GlobalModelRequest::new()));
        }
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::global_model_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_global_model_request(&mut self) -> ClientMessage_GlobalModelRequest {
        if self.has_global_model_request() {
            match self.msg.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msg::global_model_request(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientMessage_GlobalModelRequest::new()
        }
    }

    // .mosaic.protos.ClientMessage.ClientReporting reporting = 4;


    pub fn get_reporting(&self) -> &ClientMessage_ClientReporting {
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::reporting(ref v)) => v,
            _ => <ClientMessage_ClientReporting as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reporting(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_reporting(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::reporting(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reporting(&mut self, v: ClientMessage_ClientReporting) {
        self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::reporting(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reporting(&mut self) -> &mut ClientMessage_ClientReporting {
        if let ::std::option::Option::Some(ClientMessage_oneof_msg::reporting(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::reporting(ClientMessage_ClientReporting::new()));
        }
        match self.msg {
            ::std::option::Option::Some(ClientMessage_oneof_msg::reporting(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reporting(&mut self) -> ClientMessage_ClientReporting {
        if self.has_reporting() {
            match self.msg.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msg::reporting(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientMessage_ClientReporting::new()
        }
    }
}

impl ::protobuf::Message for ClientMessage {
    fn is_initialized(&self) -> bool {
        if let Some(ClientMessage_oneof_msg::disconnect(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientMessage_oneof_msg::update(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientMessage_oneof_msg::global_model_request(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientMessage_oneof_msg::reporting(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::disconnect(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::update(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::global_model_request(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(ClientMessage_oneof_msg::reporting(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &ClientMessage_oneof_msg::disconnect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientMessage_oneof_msg::update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientMessage_oneof_msg::global_model_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientMessage_oneof_msg::reporting(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &ClientMessage_oneof_msg::disconnect(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientMessage_oneof_msg::update(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientMessage_oneof_msg::global_model_request(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientMessage_oneof_msg::reporting(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage {
        ClientMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientMessage_ClientDisconnect>(
                "disconnect",
                ClientMessage::has_disconnect,
                ClientMessage::get_disconnect,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientMessage_ClientUpdate>(
                "update",
                ClientMessage::has_update,
                ClientMessage::get_update,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientMessage_GlobalModelRequest>(
                "global_model_request",
                ClientMessage::has_global_model_request,
                ClientMessage::get_global_model_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientMessage_ClientReporting>(
                "reporting",
                ClientMessage::has_reporting,
                ClientMessage::get_reporting,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientMessage>(
                "ClientMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientMessage {
        static instance: ::protobuf::rt::LazyV2<ClientMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientMessage::new)
    }
}

impl ::protobuf::Clear for ClientMessage {
    fn clear(&mut self) {
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage_ClientDisconnect {
    // message fields
    pub reason: Reason,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage_ClientDisconnect {
    fn default() -> &'a ClientMessage_ClientDisconnect {
        <ClientMessage_ClientDisconnect as ::protobuf::Message>::default_instance()
    }
}

impl ClientMessage_ClientDisconnect {
    pub fn new() -> ClientMessage_ClientDisconnect {
        ::std::default::Default::default()
    }

    // .mosaic.protos.Reason reason = 1;


    pub fn get_reason(&self) -> Reason {
        self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason = Reason::NULL;
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: Reason) {
        self.reason = v;
    }
}

impl ::protobuf::Message for ClientMessage_ClientDisconnect {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.reason, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.reason != Reason::NULL {
            my_size += ::protobuf::rt::enum_size(1, self.reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.reason != Reason::NULL {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.reason))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage_ClientDisconnect {
        ClientMessage_ClientDisconnect::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Reason>>(
                "reason",
                |m: &ClientMessage_ClientDisconnect| { &m.reason },
                |m: &mut ClientMessage_ClientDisconnect| { &mut m.reason },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientMessage_ClientDisconnect>(
                "ClientMessage.ClientDisconnect",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientMessage_ClientDisconnect {
        static instance: ::protobuf::rt::LazyV2<ClientMessage_ClientDisconnect> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientMessage_ClientDisconnect::new)
    }
}

impl ::protobuf::Clear for ClientMessage_ClientDisconnect {
    fn clear(&mut self) {
        self.reason = Reason::NULL;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage_ClientDisconnect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_ClientDisconnect {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage_ClientUpdate {
    // message fields
    pub model: ::protobuf::RepeatedField<super::tensor::TensorProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage_ClientUpdate {
    fn default() -> &'a ClientMessage_ClientUpdate {
        <ClientMessage_ClientUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ClientMessage_ClientUpdate {
    pub fn new() -> ClientMessage_ClientUpdate {
        ::std::default::Default::default()
    }

    // repeated .mosaic.protos.TensorProto model = 1;


    pub fn get_model(&self) -> &[super::tensor::TensorProto] {
        &self.model
    }
    pub fn clear_model(&mut self) {
        self.model.clear();
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::protobuf::RepeatedField<super::tensor::TensorProto>) {
        self.model = v;
    }

    // Mutable pointer to the field.
    pub fn mut_model(&mut self) -> &mut ::protobuf::RepeatedField<super::tensor::TensorProto> {
        &mut self.model
    }

    // Take field
    pub fn take_model(&mut self) -> ::protobuf::RepeatedField<super::tensor::TensorProto> {
        ::std::mem::replace(&mut self.model, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientMessage_ClientUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.model {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.model)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.model {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.model {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage_ClientUpdate {
        ClientMessage_ClientUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor::TensorProto>>(
                "model",
                |m: &ClientMessage_ClientUpdate| { &m.model },
                |m: &mut ClientMessage_ClientUpdate| { &mut m.model },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientMessage_ClientUpdate>(
                "ClientMessage.ClientUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientMessage_ClientUpdate {
        static instance: ::protobuf::rt::LazyV2<ClientMessage_ClientUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientMessage_ClientUpdate::new)
    }
}

impl ::protobuf::Clear for ClientMessage_ClientUpdate {
    fn clear(&mut self) {
        self.model.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage_ClientUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_ClientUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage_GlobalModelRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage_GlobalModelRequest {
    fn default() -> &'a ClientMessage_GlobalModelRequest {
        <ClientMessage_GlobalModelRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientMessage_GlobalModelRequest {
    pub fn new() -> ClientMessage_GlobalModelRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientMessage_GlobalModelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage_GlobalModelRequest {
        ClientMessage_GlobalModelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientMessage_GlobalModelRequest>(
                "ClientMessage.GlobalModelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientMessage_GlobalModelRequest {
        static instance: ::protobuf::rt::LazyV2<ClientMessage_GlobalModelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientMessage_GlobalModelRequest::new)
    }
}

impl ::protobuf::Clear for ClientMessage_GlobalModelRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage_GlobalModelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_GlobalModelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage_ClientReporting {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage_ClientReporting {
    fn default() -> &'a ClientMessage_ClientReporting {
        <ClientMessage_ClientReporting as ::protobuf::Message>::default_instance()
    }
}

impl ClientMessage_ClientReporting {
    pub fn new() -> ClientMessage_ClientReporting {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientMessage_ClientReporting {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage_ClientReporting {
        ClientMessage_ClientReporting::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientMessage_ClientReporting>(
                "ClientMessage.ClientReporting",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientMessage_ClientReporting {
        static instance: ::protobuf::rt::LazyV2<ClientMessage_ClientReporting> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientMessage_ClientReporting::new)
    }
}

impl ::protobuf::Clear for ClientMessage_ClientReporting {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage_ClientReporting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_ClientReporting {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Reason {
    NULL = 0,
}

impl ::protobuf::ProtobufEnum for Reason {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Reason> {
        match value {
            0 => ::std::option::Option::Some(Reason::NULL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Reason] = &[
            Reason::NULL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Reason>("Reason", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Reason {
}

impl ::std::default::Default for Reason {
    fn default() -> Self {
        Reason::NULL
    }
}

impl ::protobuf::reflect::ProtobufValue for Reason {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12protos/msflp.proto\x12\rmosaic.protos\x1a\x13protos/tensor.proto\"\
    \xf1\x03\n\rServerMessage\x12H\n\nset_config\x18\x01\x20\x01(\x0b2'.mosa\
    ic.protos.ServerMessage.SetConfigsH\0R\tsetConfig\x12L\n\treconnect\x18\
    \x02\x20\x01(\x0b2,.mosaic.protos.ServerMessage.ReconnectClientH\0R\trec\
    onnect\x12V\n\rglobal_model_\x18\x03\x20\x01(\x0b20.mosaic.protos.Server\
    Message.GlobalModelResponseH\0R\x0bglobalModel\x12C\n\x06status\x18\x04\
    \x20\x01(\x0b2).mosaic.protos.ServerMessage.ServerStatusH\0R\x06status\
    \x1a\x0c\n\nSetConfigs\x1a%\n\x0fReconnectClient\x12\x12\n\x04time\x18\
    \x01\x20\x01(\x03R\x04time\x1aG\n\x13GlobalModelResponse\x120\n\x05model\
    \x18\x01\x20\x03(\x0b2\x1a.mosaic.protos.TensorProtoR\x05model\x1a&\n\
    \x0cServerStatus\x12\x16\n\x06status\x18\x01\x20\x01(\tR\x06statusB\x05\
    \n\x03msg\"\x8d\x04\n\rClientMessage\x12O\n\ndisconnect\x18\x01\x20\x01(\
    \x0b2-.mosaic.protos.ClientMessage.ClientDisconnectH\0R\ndisconnect\x12C\
    \n\x06update\x18\x02\x20\x01(\x0b2).mosaic.protos.ClientMessage.ClientUp\
    dateH\0R\x06update\x12c\n\x14global_model_request\x18\x03\x20\x01(\x0b2/\
    .mosaic.protos.ClientMessage.GlobalModelRequestH\0R\x12globalModelReques\
    t\x12L\n\treporting\x18\x04\x20\x01(\x0b2,.mosaic.protos.ClientMessage.C\
    lientReportingH\0R\treporting\x1aA\n\x10ClientDisconnect\x12-\n\x06reaso\
    n\x18\x01\x20\x01(\x0e2\x15.mosaic.protos.ReasonR\x06reason\x1a@\n\x0cCl\
    ientUpdate\x120\n\x05model\x18\x01\x20\x03(\x0b2\x1a.mosaic.protos.Tenso\
    rProtoR\x05model\x1a\x14\n\x12GlobalModelRequest\x1a\x11\n\x0fClientRepo\
    rtingB\x05\n\x03msg*\x12\n\x06Reason\x12\x08\n\x04NULL\x10\02S\n\x05MSFL\
    P\x12J\n\x06Handle\x12\x1c.mosaic.protos.ClientMessage\x1a\x1c.mosaic.pr\
    otos.ServerMessage\"\0(\x010\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
