//  Copyright (c) modalic 2022. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at:
//
//       https://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
//  or implied. See the License for the specific language governing
//  permissions and limitations under the License.
syntax = "proto3";

package mosaic.protos;

import "tensor.proto";

// Mosaic Secure Federated Learning Protocol
//
// Clients check in to the server by opening a bidirectional stream. 
// The stream is used to track liveness and orchestrate multi-step communication.
//
service MSFLP {
  rpc Connect(stream ClientMessage) returns (stream ServerMessage) {}
}


message ServerMessage {
  message InvokeClient {}
  // Server distributes the configurations to the clients.
  //
  // These configurations contain the necessary information and hyperparameters
  // that define the Federated Learning process.
  message SetConfigs {}
}

message ClientMessage {

  // Model Update
  //
  message ClientUpdate {
    // Model represented as a repreated stream of tensors.
    repeated TensorProto model = 1;
  };

  // Client request for the latest global model.
  //
  message GlobalModelRequest {}

  // Reporting
  //
  // After MSFLP protocol execution, the client reports
  // computed updates and metrics to the server and cleans up
  // any temporary resources.
  //
  message ClientReporting {}

}