//  Copyright (c) modalic 2022. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at:
//
//       https://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
//  or implied. See the License for the specific language governing
//  permissions and limitations under the License.
syntax = "proto3";

package mosaic.protos;

import "protos/tensor.proto";

// Mosaic Secure Federated Learning Protocol
//
// Clients check in to the server by opening a bidirectional stream. 
// The stream is used to track liveness and orchestrate multi-step communication.
//
service MSFLP {
  rpc Handle(stream ClientMessage) returns (stream ServerMessage) {}
}


message ServerMessage {
  // Server distributes the configurations to the clients.
  //
  // These configurations contain the necessary information and hyperparameters
  // that define the Federated Learning process.
  message SetConfigs {}

  // Reconnect Client
  //
  // If a device is not selected for participation, 
  // the server responds with instructions to reconnect at a later point in time.
  // 
  message ReconnectClient { int64 time = 1; }

  // Response to global model request.
  //
  // Redistributes the latestes global model.
  message GlobalModelResponse {
    // Model represented as a repreated stream of tensors.
    repeated TensorProto model = 1;
  }

  // Placeholder
  //
  message ServerStatus { string status = 1; }

  // `ServerMessage` implements many fields but at most one field 
  // will be set at the same time.
  //
  // Setting any member of the oneof automatically clears all the other members.
  oneof msg {
    SetConfigs set_config = 1;
    ReconnectClient reconnect = 2;
    GlobalModelResponse global_model_ = 3;
    ServerStatus status = 4;
  }
}

// Reason
//
// Holds the various reasons when client will be rejected.
enum Reason {
  // Unknown reason.
  NULL = 0;
}

// Composition of client communication within the msflp protocol 
// bidirectional stream.
//
message ClientMessage {
  // Disconnect from Stream.
  //
  message ClientDisconnect { Reason reason = 1; }

  // ClientUpdate providing a model update.
  //
  message ClientUpdate {
    // Client Identifier that will be sent additionally to a public key.
    //
    // Optional as the pk identifies the client but client_id is more
    // human readable.
    uint32 client_id = 1;
    // The public key of the client.
    //
    bytes client_pk = 2;
    // Seed that is used to mask the model.
    // 
    // Is optional as masking the model is optional.
    bytes local_seed = 3;
    // Model represented as a repreated stream of tensors.
    //
    // For more information have a look at `TensorProto`.
    repeated TensorProto model = 4;
    // Model version represents the update round it was trained for.
    //
    uint32 model_version = 5;
  };

  // Client request for the latest global model.
  //
  message GlobalModelRequest {}

  // Reporting
  //
  // After MSFLP protocol execution, the client reports
  // computed updates and metrics to the server and cleans up
  // any temporary resources.
  //
  message ClientReporting {}

  // `ClientMessage` implements many fields but at most one field 
  // will be set at the same time.
  //
  // Setting any member of the oneof automatically clears all the other members.
  oneof msg {
    ClientDisconnect disconnect = 1;
    ClientUpdate update = 2;
    GlobalModelRequest global_model_request = 3;
    ClientReporting reporting = 4;
  }

}